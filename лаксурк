//Для заданного взвешенного неориентированного графа с N вершинами и M рёбрами найдите его остовное дерево с минимальным произведением весов рёбер.Произведение рёбер выведите по модулю 109 + 7, так как оно может быть очень большим.
//
//Входные данные
//В первой стоке даны 2 числа N и M - число вершин и рёбер в заданном графе. (2≤N≤2⋅105, 1≤M≤min(2⋅105, N∗(N−1) / 2).В следующих M строках вводятся тройки чисел ui, vi, wi - обозначающее ребро из вершины ui в vi с весом wi.Веса рёбер положительные и не превышают 104
//	Выходные данные
//	В первой строке выходных данных выведите произведение рёбер в остовном дереве с минимальным произведением весов рёбер.Произведение рёбер выведите по модулю 109 + 7, так как оно может быть очень большим.В следующих N−1 строках выведите через пробел пары чисел ui vi - рёбра полученного дерева

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <iomanip>
#include <map>
#include <math.h>
#include <fstream>
using namespace std;
typedef long long ll;
typedef long double ld;
#define all(x) x.begin(), x.end()

double PI = 3.14159265358979323846;



int main()
{
	int n, m;
	cin >> n >> m;

	vector<pair<ll, pair<int, int>>> A(m);

	for (int i = 0; i < m; i++)
	{
		cin >> A[i].second.first >> A[i].second.second >> A[i].first;
	}
	sort(all(A));
	vector<int> Put(n + 1);
	vector<int> Cout_elem(n + 1);

	for (int i = 1; i <= n; i++)
	{
		Put[i] = i;
		Cout_elem[i] = 1;
	}

	int a, b;
	ll sum = 1;

	vector<pair<int, int>> Result;

	for (int i = 0; i < m; i++)
	{
		a = A[i].second.first;
		b = A[i].second.second;
		while (a != Put[a])
		{
			a = Put[a];
		}
		while (b != Put[b])
		{
			b = Put[b];
		}

		if (a != b)
		{
			sum = (sum * A[i].first) % 1000000007;
			Result.push_back(A[i].second);
			if (Cout_elem[a] > Cout_elem[b])
			{
				Cout_elem[a] += Cout_elem[b];
				Put[b] = a;
			}
			else
			{
				Cout_elem[b] += Cout_elem[a];
				Put[a] = b;
			}
		}
	}
	cout << sum << '\n';
	for (size_t i = 0; i < Result.size(); i++)
	{
		cout << Result[i].first << ' ' << Result[i].second << '\n';
	}

}

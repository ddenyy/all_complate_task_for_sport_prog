#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include <set>
#include <cmath>
using namespace std;
#define all (x) x.begin(), x.end()
typedef long long ll ;



vector<ll> a(100000, 0);
vector<ll> t(100000*100, 0);

// пересчет
void recalc(ll v, ll l, ll r) {
    t[v] = t[2 * v + 1] + t[2 * v + 2];
}

// строим дерево
void build(ll  v, ll  l, ll  r) {
    if (r - l == 1) {
        t[v] = a[l];
        return;
    }

    ll  m = (l + r) / 2;
    build(2 * v + 1, l, m);
    build(2 * v + 2, m, r);
    recalc(v, l, r);
}

// запрос
ll query(ll  v, ll  l, ll  r, ll  ql, ll  qr) {
    if ((ql >= r) || (l >= qr)) 
    {
        return 0;
    }
    if ((ql <= l) && (r <= qr))
    {
        return t[v];
    }
    ll  m = (l + r) / 2;
    ll  q1 = query(2 * v + 1, l, m, ql, qr);
    ll  q2 = query(2 * v + 2, m, r, ql, qr);
    return q1 + q2;
}

void update(ll  v, ll  l, ll  r, ll  i, ll  x) {
    if (r - l == 1) {
        t[v] = x;
        return;
    }

    ll m = (l + r) / 2;
    if (i < m)
        update(2 * v + 1, l, m, i, x);
    else
        update(2 * v + 2, m, r, i, x);
    recalc(v, l, r);
}


int main()
{
    
    ll n, m;
    cin >> n >> m;
    
    build(0, 0, n);
   
    /*build(0, 0, n);*/
    while (m--) {
        ll type, left, right, x, i;
        cin >> type;
        if (type == 1) {
            cin >> left >> right;
            cout << query(0, 0, n, left - 1, right) << '\n';
            
        }
        else {
            cin >> i >> x;
            update(0, 0, n, i - 1, x);
        }
    }

}



#include<iostream>
using namespace std;
/*
ф-ция слияния
принимает массив который сортируем
нижнюю, вернюю и медианную границу
ссылку на буферный массив
*/
void merge(int* Merge_array, int low, int high, int mid, int* Buffer_array)
{
	int cursor_1;					// указатель первого массива
	int cursor_2;					// указатель второго массива
	int current_cursor;				// указатель буферного массива
	cursor_1 = low;
	cursor_2 = mid + 1;
	current_cursor = low;
	while (cursor_1 <= mid && cursor_2 <= high)
	{
		if (Merge_array[cursor_1] < Merge_array[cursor_2])
		{
			Buffer_array[current_cursor] = Merge_array[cursor_1];
			current_cursor++;
			cursor_1++;
		}
		else
		{
			Buffer_array[current_cursor] = Merge_array[cursor_2];
			cursor_2++;
			current_cursor++;
		}
	}
	while (cursor_1 <= mid)
	{
		Buffer_array[current_cursor] = Merge_array[cursor_1];
		current_cursor++;
		cursor_1++;
	}
	while (cursor_2 <= high)
	{
		Buffer_array[current_cursor] = Merge_array[cursor_2];
		current_cursor++;
		cursor_2++;
	}
	for (int i = low; i <= high; i++)
	{
		Merge_array[i] = Buffer_array[i];
	}
}
/*
ф-ция сортировки слиянием
принимает массив который сортируем
нижнюю, вернюю границы соотвественно
ссылку на буферный массив
*/
void merge_sort(int* Merge_array, int low, int high, int* Buffer_array) {
	int mid;
	if (low < high)
	{
		mid = (low + high) / 2;
		merge_sort(Merge_array, low, mid, Buffer_array);
		merge_sort(Merge_array, mid + 1, high, Buffer_array);
		merge(Merge_array, low, high, mid, Buffer_array);
	}
}

/*
ф-ция считывает два массива
принимает ссылки типа int* на массив
принимает размер массива
*/
void cin_arrays(int* Merge_array, int size_array) {
	for (int i = 0; i < size_array; i++) {
		cin >> Merge_array[i];
	}
}

/*
ф-ция выводит ответ на задачу.
принимает массив и размер массива
проверяет по массиву оставшихся наших атак, сможем ли мы получить очко за данного монстра
*/
void cout_answer(int* field_war, int size_field_war, int skip_attack) {
	int point = 0;																	// количество итоговых очков
	for (int i = 0; i < size_field_war; i++) {
		if (field_war[i] <= skip_attack) {											// если можем получить очко при пропуске хода противника
			point++;																
			skip_attack -= field_war[i];											// удаляем из количества пропусков хода, сколько использовали
		}
		else {
			break;
		}
	}
	cout << point;																	// выводим ответы
}

/*
ф-ция принимает массив со всеми монстрами, размер массива, твою силу и силу противника
преобразует массив. т.е hp каждого монстра в количество оставшихся наших атак чтоб убить монстра
*/
void transform_field_war(int* field_war, int size, int power_you, int power_enemy) {
	for (int i = 0; i < size; i++) {
		field_war[i] %= (power_you + power_enemy);									// исключаем из hp монстра наши и противника атаки
		if (field_war[i] == 0) {													// если мы убиваем монстра только нашими и атаками противника
			field_war[i] += (power_you + power_enemy);								// записываем hp монстра на предпоследней атаке
		}
		field_war[i] = (field_war[i] - 1) / power_you;								// записываем количество оставшихся наших атак чтоб получить очко
	}
}

int main()
{
	int size_field_war;																// размер поля боя (кол-во всех монстров)
	int power_you;																	// твоя сила
	int power_enemy;																// сила противника
	int skip_attack;																// количество скипов атак противника
	cin >> size_field_war >> power_you >> power_enemy >> skip_attack;
	int* Buffer_array = new int[size_field_war];									// буферный массив
	int* field_war = new int[size_field_war];
	cin_arrays(field_war, size_field_war);
	transform_field_war(field_war, size_field_war, power_you, power_enemy);
	merge_sort(field_war, 0, size_field_war - 1, Buffer_array);
	cout_answer(field_war, size_field_war, skip_attack);

	delete[] Buffer_array;
	delete[] field_war;
	return 0;
}

